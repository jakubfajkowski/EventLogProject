//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventLogProject.LogServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogRecord", Namespace="http://schemas.datacontract.org/2004/07/LogAgent")]
    [System.SerializableAttribute()]
    public partial class LogRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string clientIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EventLogProject.LogServiceReference.LogType logTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime timestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string clientId {
            get {
                return this.clientIdField;
            }
            set {
                if ((object.ReferenceEquals(this.clientIdField, value) != true)) {
                    this.clientIdField = value;
                    this.RaisePropertyChanged("clientId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EventLogProject.LogServiceReference.LogType logType {
            get {
                return this.logTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.logTypeField, value) != true)) {
                    this.logTypeField = value;
                    this.RaisePropertyChanged("logType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime timestamp {
            get {
                return this.timestampField;
            }
            set {
                if ((this.timestampField.Equals(value) != true)) {
                    this.timestampField = value;
                    this.RaisePropertyChanged("timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogType", Namespace="http://schemas.datacontract.org/2004/07/LogAgent")]
    [System.SerializableAttribute()]
    public partial class LogType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<string, string> additionalFieldsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<string, string> additionalFields {
            get {
                return this.additionalFieldsField;
            }
            set {
                if ((object.ReferenceEquals(this.additionalFieldsField, value) != true)) {
                    this.additionalFieldsField = value;
                    this.RaisePropertyChanged("additionalFields");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LogServiceReference.ILogService")]
    public interface ILogService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogService/insertLogRecord", ReplyAction="http://tempuri.org/ILogService/insertLogRecordResponse")]
        int insertLogRecord(EventLogProject.LogServiceReference.LogRecord logRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogService/insertLogRecord", ReplyAction="http://tempuri.org/ILogService/insertLogRecordResponse")]
        System.Threading.Tasks.Task<int> insertLogRecordAsync(EventLogProject.LogServiceReference.LogRecord logRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogService/selectLogRecord", ReplyAction="http://tempuri.org/ILogService/selectLogRecordResponse")]
        System.Data.DataSet selectLogRecord(EventLogProject.LogServiceReference.LogType logType, string clientId, System.DateTime from, System.DateTime to, int numberOfFirstRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogService/selectLogRecord", ReplyAction="http://tempuri.org/ILogService/selectLogRecordResponse")]
        System.Threading.Tasks.Task<System.Data.DataSet> selectLogRecordAsync(EventLogProject.LogServiceReference.LogType logType, string clientId, System.DateTime from, System.DateTime to, int numberOfFirstRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogService/deleteLogRecord", ReplyAction="http://tempuri.org/ILogService/deleteLogRecordResponse")]
        int deleteLogRecord(EventLogProject.LogServiceReference.LogRecord logRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogService/deleteLogRecord", ReplyAction="http://tempuri.org/ILogService/deleteLogRecordResponse")]
        System.Threading.Tasks.Task<int> deleteLogRecordAsync(EventLogProject.LogServiceReference.LogRecord logRecord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogService/registerLogType", ReplyAction="http://tempuri.org/ILogService/registerLogTypeResponse")]
        int registerLogType(EventLogProject.LogServiceReference.LogType log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogService/registerLogType", ReplyAction="http://tempuri.org/ILogService/registerLogTypeResponse")]
        System.Threading.Tasks.Task<int> registerLogTypeAsync(EventLogProject.LogServiceReference.LogType log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogService/getLogTypes", ReplyAction="http://tempuri.org/ILogService/getLogTypesResponse")]
        EventLogProject.LogServiceReference.LogType[] getLogTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogService/getLogTypes", ReplyAction="http://tempuri.org/ILogService/getLogTypesResponse")]
        System.Threading.Tasks.Task<EventLogProject.LogServiceReference.LogType[]> getLogTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogService/deleteLogType", ReplyAction="http://tempuri.org/ILogService/deleteLogTypeResponse")]
        int deleteLogType(EventLogProject.LogServiceReference.LogType log);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogService/deleteLogType", ReplyAction="http://tempuri.org/ILogService/deleteLogTypeResponse")]
        System.Threading.Tasks.Task<int> deleteLogTypeAsync(EventLogProject.LogServiceReference.LogType log);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILogServiceChannel : EventLogProject.LogServiceReference.ILogService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogServiceClient : System.ServiceModel.ClientBase<EventLogProject.LogServiceReference.ILogService>, EventLogProject.LogServiceReference.ILogService {
        
        public LogServiceClient() {
        }
        
        public LogServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LogServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int insertLogRecord(EventLogProject.LogServiceReference.LogRecord logRecord) {
            return base.Channel.insertLogRecord(logRecord);
        }
        
        public System.Threading.Tasks.Task<int> insertLogRecordAsync(EventLogProject.LogServiceReference.LogRecord logRecord) {
            return base.Channel.insertLogRecordAsync(logRecord);
        }
        
        public System.Data.DataSet selectLogRecord(EventLogProject.LogServiceReference.LogType logType, string clientId, System.DateTime from, System.DateTime to, int numberOfFirstRecord) {
            return base.Channel.selectLogRecord(logType, clientId, from, to, numberOfFirstRecord);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> selectLogRecordAsync(EventLogProject.LogServiceReference.LogType logType, string clientId, System.DateTime from, System.DateTime to, int numberOfFirstRecord) {
            return base.Channel.selectLogRecordAsync(logType, clientId, from, to, numberOfFirstRecord);
        }
        
        public int deleteLogRecord(EventLogProject.LogServiceReference.LogRecord logRecord) {
            return base.Channel.deleteLogRecord(logRecord);
        }
        
        public System.Threading.Tasks.Task<int> deleteLogRecordAsync(EventLogProject.LogServiceReference.LogRecord logRecord) {
            return base.Channel.deleteLogRecordAsync(logRecord);
        }
        
        public int registerLogType(EventLogProject.LogServiceReference.LogType log) {
            return base.Channel.registerLogType(log);
        }
        
        public System.Threading.Tasks.Task<int> registerLogTypeAsync(EventLogProject.LogServiceReference.LogType log) {
            return base.Channel.registerLogTypeAsync(log);
        }
        
        public EventLogProject.LogServiceReference.LogType[] getLogTypes() {
            return base.Channel.getLogTypes();
        }
        
        public System.Threading.Tasks.Task<EventLogProject.LogServiceReference.LogType[]> getLogTypesAsync() {
            return base.Channel.getLogTypesAsync();
        }
        
        public int deleteLogType(EventLogProject.LogServiceReference.LogType log) {
            return base.Channel.deleteLogType(log);
        }
        
        public System.Threading.Tasks.Task<int> deleteLogTypeAsync(EventLogProject.LogServiceReference.LogType log) {
            return base.Channel.deleteLogTypeAsync(log);
        }
    }
}
