using EventLogProject.LogServiceReference;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace EventLogProject {
    public partial class MainForm : System.Windows.Forms.Form {
        public MainForm() {
            InitializeComponent();
        }

        private void MainForm_Load(object sender, EventArgs e) {
            updateLogTypeComboBox();
            clientIdTextBox.Text = Program.clientId;
        }

        private void updateLogTypeComboBox() {
            logTypeComboBox.Items.Clear();
            try { 
                LogType[] logTypes = Program.logServiceClient.getLogTypes();

                foreach (LogType logType in logTypes) {
                    BoxItem<LogType> comboBoxItem = new BoxItem<LogType> {
                        text = logType.name,
                        value = logType
                    };

                    logTypeComboBox.Items.Add(comboBoxItem);
                }

            }
            catch {
                MessageBox.Show("Log type collecting failure.");
            }

    logTypeComboBox.Items.Add(new BoxItem<LogType> {
                text = "<Add new log type>",
                value = null
            });

            logTypeComboBox.Text = "<Select Log Type>";
        }

        private void logTypeComboBox_SelectedIndexChanged(object sender, EventArgs e) {
            string selectedLogTypeName = logTypeComboBox.GetItemText(logTypeComboBox.SelectedItem);

            if (selectedLogTypeName == "<Add new log type>") {
                CreateLogDialog createLogDialog = new CreateLogDialog();
                createLogDialog.ShowDialog(this);
                updateLogTypeComboBox();
            }
            else {
                LogType logType = ((BoxItem<LogType>) logTypeComboBox.SelectedItem).value;
            
                fieldsComboBox.Items.Clear();

                foreach (KeyValuePair<string, string> additionalField in logType.additionalFields) {
                    BoxItem<string> comboBoxItem = new BoxItem<string> {
                        text = additionalField.Key,
                        value = additionalField.Value
                    };

                    updateFieldsTypeComboBox(comboBoxItem);
                }
            }
        }

        private void updateFieldsTypeComboBox(BoxItem<string> comboBoxItem) {
            fieldsComboBox.Items.Add(comboBoxItem);
            fieldsComboBox.Text = "<Select Additional Field>";
        }

        private void fieldsComboBox_SelectedIndexChanged(object sender, EventArgs e) {
            selectedFieldTextBox.Text = ((BoxItem<string>) fieldsComboBox.SelectedItem).value;
        }

        private void selectedFieldTextBox_TextChanged(object sender, EventArgs e) {
            BoxItem<LogType> selectedBoxItem = ((BoxItem<LogType>) logTypeComboBox.SelectedItem);

            if (selectedBoxItem != null) {
                ((BoxItem<string>) fieldsComboBox.SelectedItem).value = selectedFieldTextBox.Text;

                string key = ((BoxItem<string>) fieldsComboBox.SelectedItem).ToString();
                selectedBoxItem.value.additionalFields[key] =
                    selectedFieldTextBox.Text;
            }
            else MessageBox.Show(this, "You must choose log type first.");
        }

        private void clientIdTextBox_TextChanged(object sender, EventArgs e) {
            Program.clientId = clientIdTextBox.Text;
        }

        private void generateButton_Click(object sender, EventArgs e) {
            BoxItem<LogType> selectedBoxItem = ((BoxItem<LogType>) logTypeComboBox.SelectedItem);

            if (selectedBoxItem != null) {
                LogType logType = selectedBoxItem.value;
                LogRecord logRecord = new LogRecord {
                    logType = logType,
                    clientId = Program.clientId,
                    timestamp = DateTime.Now
                };

                try { 
                    Program.logServiceClient.insertLogRecord(logRecord);
                }
                catch {
                    MessageBox.Show("Log type " + logType.name + " record insertion failure.");
                }
        }
            else MessageBox.Show(this, "You must choose log type first.");
        }

        private void autoGenerateButton_Click(object sender, EventArgs e) {
            new AutoGenerateDialog().ShowDialog(this);
        }

        private void randomizeFieldButton_Click(object sender, EventArgs e) {
            selectedFieldTextBox.Text = RandomLogRecordGenerator.additionalField();
        }

        private void randomizeAllFieldsButton_Click(object sender, EventArgs e) {
            BoxItem<LogType> selectedBoxItem = ((BoxItem<LogType>) logTypeComboBox.SelectedItem);

            if (selectedBoxItem != null) {
                LogType logType = selectedBoxItem.value;

                LogRecord randomLogRecord = RandomLogRecordGenerator.logRecord(logType);

                try { 
                    Program.logServiceClient.insertLogRecord(randomLogRecord);
                }
                catch {
                    MessageBox.Show("Log type " + logType.name + " random record insertion failure.");
                }
        }
            else MessageBox.Show(this, "You must choose log type first.");
        }
    }
}